#!/usr/bin/groovy
@Library('pipelib@v0.2.4') _

node ("sl61") {

  stage("PZSVC Deps Security Scans") {
    if(fileExists('./pzsvc-ndwi-repo')) {
      deleteDir()
    }
    sh "mkdir -p pzsvc-ndwi-repo"
    dir("pzsvc-ndwi-repo") {
      git url: "https://github.com/venicegeo/pzsvc-ndwi-py.git", branch: "pipeline-refactor"
        sh "git submodule init"
        sh "git submodule update --recursive"
        sh "echo 'fortify stuffs'"
        withCredentials([[$class: 'StringBinding', credentialsId: '978C467A-2B26-47AE-AD2F-4AFD5A4AF695', variable: 'THREADFIXKEY']]) {
          dir("./conda-recipes/vendor") {
            parallel(
              gippyscan: {
                dir("./gippy") {
                  // **Fortify**
                  sh "/opt/hp_fortify_sca/bin/sourceanalyzer -b ${env.BUILD_NUMBER} ./gippy/{*.py,**/*.py}"
                  sh "/opt/hp_fortify_sca/bin/sourceanalyzer -b ${env.BUILD_NUMBER}  -scan -Xmx8G -f fortifyResults-${env.BUILD_NUMBER}.fpr"
                  sh "/bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@fortifyResults-${env.BUILD_NUMBER}.fpr https://threadfix.devops.geointservices.io/rest/applications/93/upload?apiKey=$THREADFIXKEY"
                  // **OWASP**
                  sh '/opt/dependency-check/bin/dependency-check.sh --project "Gippy" --scan "." --format "XML" --enableExperimental'
                  sh "/bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@dependency-check-report.xml https://threadfix.devops.geointservices.io/rest/applications/93/upload?apiKey=$THREADFIXKEY"
                }
              },
              bfalgscan: {
                dir("./bfalg-ndwi") {
                  // **Fortify**
                  sh "/opt/hp_fortify_sca/bin/sourceanalyzer -b ${env.BUILD_NUMBER} ./bfalg_ndwi/{*.py,**/*.py}"
                  sh "/opt/hp_fortify_sca/bin/sourceanalyzer -b ${env.BUILD_NUMBER}  -scan -Xmx8G -f fortifyResults-${env.BUILD_NUMBER}.fpr"
                  sh "/bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@fortifyResults-${env.BUILD_NUMBER}.fpr https://threadfix.devops.geointservices.io/rest/applications/92/upload?apiKey=$THREADFIXKEY"
                  // **OWASP**
                  sh '/opt/dependency-check/bin/dependency-check.sh --project "Bfalg-ndwi" --scan "." --format "XML" --enableExperimental'
                  sh "/bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@dependency-check-report.xml https://threadfix.devops.geointservices.io/rest/applications/92/upload?apiKey=$THREADFIXKEY"
                }
              },
              beachfront: {
                dir("./beachfront-py") {
                  // **Fortify**
                  sh "/opt/hp_fortify_sca/bin/sourceanalyzer -b ${env.BUILD_NUMBER} ./beachfront/{*.py,**/*.py}"
                  sh "/opt/hp_fortify_sca/bin/sourceanalyzer -b ${env.BUILD_NUMBER}  -scan -Xmx8G -f fortifyResults-${env.BUILD_NUMBER}.fpr"
                  sh "/bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@fortifyResults-${env.BUILD_NUMBER}.fpr https://threadfix.devops.geointservices.io/rest/applications/91/upload?apiKey=$THREADFIXKEY"
                  // **OWASP**
                  sh '/opt/dependency-check/bin/dependency-check.sh --project "Beachfront Py" --scan "." --format "XML" --enableExperimental'
                  sh "/bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@dependency-check-report.xml https://threadfix.devops.geointservices.io/rest/applications/91/upload?apiKey=$THREADFIXKEY"
                }
              },
              pzsvcexec: {
                dir("./pzsvc-exec") {
                 // **OWASP**
                 sh '/opt/dependency-check/bin/dependency-check.sh --project "PSVC Exec" --scan "." --format "XML" --enableExperimental'
                sh "/bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@dependency-check-report.xml https://threadfix.devops.geointservices.io/rest/applications/94/upload?apiKey=$THREADFIXKEY"
                }
              }
            )
          }
        }
    }
  }

  stage("PZSVC Scans Pass/Fail") {
    git url: "https://github.com/venicegeo/sspf"
    dir("./sspf") {
      withCredentials([[$class: 'StringBinding', credentialsId: '978C467A-2B26-47AE-AD2F-4AFD5A4AF695', variable: 'THREADFIXKEY']]) {
        sh "curl  --fail --silent 'https://threadfix.devops.geointservices.io/rest/applications/94?apiKey=$THREADFIXKEY' | ./sspf.py"
        sh "curl  --fail --silent 'https://threadfix.devops.geointservices.io/rest/applications/93?apiKey=$THREADFIXKEY' | ./sspf.py"
        sh "curl  --fail --silent 'https://threadfix.devops.geointservices.io/rest/applications/92?apiKey=$THREADFIXKEY' | ./sspf.py"
        sh "curl  --fail --silent 'https://threadfix.devops.geointservices.io/rest/applications/91?apiKey=$THREADFIXKEY' | ./sspf.py"
      }
    }
  }


  stage("Conda Setup") {
    // Install miniconda and conda build
    if(!fileExists('./miniconda2')) {
      sh "wget https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh -O miniconda.sh"
      sh "bash miniconda.sh -b -p miniconda2"
      sh "rm miniconda.sh"
      withEnv(["PATH+=${pwd()}/miniconda2/bin"]) {
        sh "conda install conda-build"
      }
    }
  }

  stage("Conda Build") {
    withEnv(["PATH+=${pwd()}/miniconda2/bin"]) {
      dir("pzsvc-ndwi-repo") {
        // Loop through the vendor/ directories and build the packages using conda
        //sh "for d in \$(find . -type d -maxdepth 1); do conda build -c bioconda -c conda-forge \$d; done"
        sh "conda build  ./conda-recipes/agg"
        sh "conda build -c local -c bioconda ./conda-recipes/pypotrace"
        sh "conda build -c local -c bioconda ./conda-recipes/gippy"
        sh "conda build -c local -c bioconda -c conda-forge ./conda-recipes/beachfront"
        sh "conda build -c local -c bioconda -c conda-forge ./conda-recipes/bfalg-ndwi"
      }
    }
  }

//  stage("Nexus Deploy pzsvc-ndwi") {
//    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'ldap_baxtersh', usernameVariable: 'NEXUSUSER', passwordVariable: 'NEXUSPASS']]) {
//      dir("./miniconda2/conda-bld") {
//        sh """
//           for f in \$(find . -type f); do
//              curl -T "\$f" -u \$NEXUSUSER:\$NEXUSPASS https://nexus.devops.geointservices.io/content/sites/beachfront-conda/$f
//           done
//           """
//      }
//    }
//  }
//
//  stage("Staging Deploy") {
//    // Do Cloudfoundry Push
//    git url: "https://github.com/venicegeo/pzsvc-ndwi-py.git"
//    dir("pzsvc-ndwi-py") {
//      cfPush{
//        cfTarget = 'stage'
//      }
//      cfBgDeploy {
//        cfTarget = 'stage'
//      }
//    }
//  }
}

