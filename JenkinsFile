#!/usr/bin/groovy 
@Library('pipelib@v0.2.4') _

node ("sl61") {

  def goHome = tool 'golang_1_7'
  def pydir = '.pydir'
  def godir = '.godir'
  def mvnHome = tool 'M3'
  def venv = '.venv'

  stage("Clean/Setup") {
    sh "rm -rf ${godir} && rm -rf ${pydir} && rm -rf ${venv}"
    sh "mkdir -p ${pydir} && mkdir -p ${godir} && mkdir -p ${venv}"
    dir("${godir}") {
        sh "mkdir -p gopath"
        sh "mkdir -p gopath/bin"
        sh "mkdir -p gopath/src"
        sh "mkdir -p gopath/pkg"
    }
  }

  stage("Virtualenv") {
    sh "/bin/virtualenv .venv -p /usr/bin/python"
    sh ".venv/bin/python --version"
    sh ".venv/bin/pip --version"
    withEnv(["PATH=.venv/bin:$PATH"]) {
      sh ".venv/bin/pip install --upgrade --no-cache pip"
      dir("${pydir}") {
        //Build numpy in place so we can package it all up
        sh "wget https://pypi.python.org/packages/b7/9d/8209e555ea5eb8209855b6c9e60ea80119dab5eff5564330b35aa5dc4b2c/numpy-1.12.0.zip#md5=33e5a84579f31829bbbba084fe0a4300"
        sh "unzip numpy-1.12.0.zip"
        dir("numpy-1.12.0") {
          //"../venv/bin/python setup.py install"
          "../venv/bin/python setup.py build_ext --inplace"
        }
        //sh "../venv/bin/pip install -e numpy-1.9.1"
        sh "wget http://potrace.sourceforge.net/download/1.13/potrace-1.13.tar.gz"
        sh "tar xvf potrace-1.13.tar.gz"
        dir("potrace-1.13") {
          sh "./configure --prefix=???"
          sh "make && make install"
        }
        sh "wget wget http://www.antigrain.com/agg-2.5.tar.gz"
        sh "tar xvf agg-2.5.tar.gz"
        dir("agg-2.5") {
          sh "automake"
        }
        sh "wget https://pypi.python.org/packages/28/6f/59ebf9fa50553426d28c0aec6d0690e84cca3841edd10276afaaedb8d02b/pypotrace-0.1.3.tar.gz"
        dir("pypotrace-whatever") {
          sh "python setup.py build_ext -L/home/vagrant/potrace-1.13/src/.libs --include-dirs=/home/vagrant/potrace-1.13/src/"
        }
      }
    }
  }

  stage("Build") {
    parallel(
      goBuild: {
        withEnv(["PATH+=${goHome}/bin:${pwd}/gopath/bin", "GOROOT=${goHome}", "GOPATH=${pwd()}/gopath"]) {
          dir("${godir}/${GOPATH}/src") {
            sh "go get github.com/venicegeo/pzsvc-exec/..."
          }
        }
      },
      pyBuild: {
        dir("${pydir}") {
          git url: "https://github.com/venicegeo/bfalg-ndwi.git"
          sh "docker-compose build"
          sh "docker-compose run package"
          sh "cp -r deploy vendor"
        }
      })
  }

  stage("Golang Security Scans") {
    withCredentials([[$class: 'StringBinding', credentialsId: '978C467A-2B26-47AE-AD2F-4AFD5A4AF695', variable: 'THREADFIXKEY']]) {
      dir("${godir}") {
        sh '/opt/dependency-check/bin/dependency-check.sh --project "PZ SVC Exec" --scan "." --format "XML" --enableExperimental'
        //**Dont upload anything while testing
        //sh "/bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@dependency-check-report.xml https://threadfix.devops.geointservices.io/rest/applications/69/upload?apiKey=$THREADFIXKEY"
      }
    }
  }

  stage("Python Security Scans") {
    withCredentials([[$class: 'StringBinding', credentialsId: '978C467A-2B26-47AE-AD2F-4AFD5A4AF695', variable: 'THREADFIXKEY']]) {
      dir("${pydir}") {
        sh "/opt/hp_fortify_sca/bin/sourceanalyzer -b ${env.BUILD_NUMBER} deploy/{*.py,**/*.py}"
        sh "/opt/hp_fortify_sca/bin/sourceanalyzer -b ${env.BUILD_NUMBER}  -scan -Xmx8G -f fortifyResults-${env.BUILD_NUMBER}.fpr"
        //**Dont upload anything while testing
        //sh "/bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@fortifyResults-${env.BUILD_NUMBER}.fpr https://threadfix.devops.geointservices.io/rest/applications/56/upload?apiKey=$THREADFIXKEY"
        sh '/opt/dependency-check/bin/dependency-check.sh --project "PZ BFLG NDWI" --scan "." --format "XML" --enableExperimental'
        //**Dont upload anything while testing
        //sh "/bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@dependency-check-report.xml https://threadfix.devops.geointservices.io/rest/applications/69/upload?apiKey=$THREADFIXKEY"
      }
    }
 }

  stage("Scan Pass/Fail") {
    withCredentials([[$class: 'StringBinding', credentialsId: '978C467A-2B26-47AE-AD2F-4AFD5A4AF695', variable: 'THREADFIXKEY']]) {
      sh "echo 'Scan Pass/Fail running'"
      git url: "https://github.com/venicegeo/sspf"
      sh "curl  --fail --silent 'https://threadfix.devops.geointservices.io/rest/applications/56?apiKey=$THREADFIXKEY' | ./sspf/sspf.py"
    }
  }

  stage("Nexus Deploy PZSVC-EXEC/TASKWRKR") {
    sh "echo 'nexus deploy here'"
    mavenPush {
      mavenProject='beachfront'
      app='pzsvc-exec'
      packaging='bin'
      mavenArtifact='./gopath/bin/pzsvc-exec'
    }
    mavenPush {
      mavenProject='beachfront'
      app='pzsvc-taskworker'
      packaging='bin'
      mavenArtifact='./gopath/bin/pzsvc-taskworker'
    }
  }

 stage("Nexus Deploy BFALG-NDWI") {
    dir(".pydir") {
      sh "python setup.py bdist"
      sh "mv dist/bfalg_ndwi-*.linux-x86_64.tar.gz ../bfalg-ndwi-${env.BUILD_NUMBER}"
    }
    mavenPush {
      mavenProject='beachfront'
      app='bfalg-ndwi'
      packaging='tar.gz'
      mavenArtifact='bfalg-ndwi-${env.BUILD_NUMBER}'
    }
  }

  stage("Staging Deploy") {
    // Do Cloudfoundry Push
    git url: "https://github.com/venicegeo/pzsvc-ndwi-py.git"
    dir("pzsvc-ndwi-py") {
      cfPush{
        cfTarget = 'stage'
      }
      cfBgDeploy {
        cfTarget = 'stage'
      }
    }
  }
}

